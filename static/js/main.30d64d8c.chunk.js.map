{"version":3,"sources":["Users/users.js","Authentication/auth.js","Authentication/loginPage.js","App.js","serviceWorker.js","index.js"],"names":["SearchField","props","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","UserList","List","filters","Datagrid","rowClick","TextField","EmailField","UrlField","UserEdit","Edit","SimpleForm","disabled","UserCreate","refresh","useRefresh","redirect","useRedirect","Create","onSuccess","data","login","username","password","localStorage","setItem","fetch","then","response","clone","json","username_corrected","toLowerCase","Promise","resolve","reject","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions","CustomLoginForm","withStyles","button","background","LoginForm","main","Login","loginForm","dataProvider","fakeDataProvider","generated","App","Admin","loginPage","LoginPage","authProvider","authUser","Resource","name","list","edit","create","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8jYAIMA,EAAc,SAACC,GAAD,OAClB,kBAACC,EAAA,EAAWD,EACX,kBAACE,EAAA,EAAD,CAAWC,MAAM,SAASC,OAAO,IAAIC,UAAQ,IAC7C,kBAACC,EAAA,EAAD,CAAgBH,MAAM,OAAOC,OAAO,SAASG,UAAU,QAAQC,YAAU,GACxE,kBAACC,EAAA,EAAD,CAAaC,WAAW,YAOfC,EAAW,SAAAX,GAAK,OAC3B,kBAACY,EAAA,EAAD,eAAMC,QAAS,kBAAC,EAAD,OAAqBb,GACnC,kBAACc,EAAA,EAAD,CAAUC,SAAS,QACnB,kBAACC,EAAA,EAAD,CAAWZ,OAAO,OAClB,kBAACY,EAAA,EAAD,CAAWZ,OAAO,SAClB,kBAACY,EAAA,EAAD,CAAWZ,OAAO,aAClB,kBAACa,EAAA,EAAD,CAAYb,OAAO,UACnB,kBAACY,EAAA,EAAD,CAAWZ,OAAO,iBAAiBD,MAAM,YACzC,kBAACa,EAAA,EAAD,CAAWZ,OAAO,UAClB,kBAACc,EAAA,EAAD,CAAUd,OAAO,YACjB,kBAACY,EAAA,EAAD,CAAWZ,OAAO,eAAeD,MAAM,eAM7BgB,EAAW,SAAAnB,GAAK,OAC3B,kBAACoB,EAAA,EAASpB,EACT,kBAACqB,EAAA,EAAD,KACC,kBAACnB,EAAA,EAAD,CAAWoB,UAAQ,EAAClB,OAAO,OAC3B,kBAACF,EAAA,EAAD,CAAWE,OAAO,SAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,aAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,iBAAiBD,MAAM,YACzC,kBAACD,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAACc,EAAA,EAAD,CAAUd,OAAO,YACjB,kBAACF,EAAA,EAAD,CAAWE,OAAO,eAAeD,MAAM,eAM9BoB,EAAa,SAAAvB,GAEzB,IAAMwB,EAAUC,cACVC,EAAWC,cAKjB,OACC,kBAACC,EAAA,EAAD,eAAQC,UALS,SAAC,GAAW,EAAVC,KACnBJ,EAAS,UACTF,MAGkCxB,GACjC,kBAACqB,EAAA,EAAD,KACC,kBAACnB,EAAA,EAAD,CAAWE,OAAO,SAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,aAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,iBAAiBD,MAAM,YACzC,kBAACD,EAAA,EAAD,CAAWE,OAAO,UAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,YAClB,kBAACF,EAAA,EAAD,CAAWE,OAAO,eAAeD,MAAM,eChE5B,GAEd4B,MAAO,YAA6B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAEnB,OADAC,aAAaC,QAAQ,WAAYH,GAC1BI,MAAM,iEACVC,MAAK,SAAAC,GACL,OAAOA,EAASC,QAAQC,UAExBH,MAAK,SAAAG,GACL,IAAIC,EAAqBT,EAASU,cAClC,OAAIT,IAAaO,EAAKC,GAAL,KACTE,QAAQC,UACAD,QAAQE,aAK5BC,OAAQ,WAEP,OADAZ,aAAaa,WAAW,YACjBJ,QAAQC,WAGhBI,WAAY,YAAiB,IAAdC,EAAa,EAAbA,OACd,OAAe,MAAXA,GAA6B,MAAXA,GACrBf,aAAaa,WAAW,YACjBJ,QAAQE,UAETF,QAAQC,WAGhBM,UAAW,WAEV,OAAOhB,aAAaiB,QAAQ,YACzBR,QAAQC,UACRD,QAAQE,UAGZO,eAAgB,kBAAMT,QAAQC,Y,2CC7BzBS,EAAkBC,YAAW,CAClCC,OAAQ,CAAEC,WAAY,YADCF,CAErBG,KASYH,cAfC,CACfI,KAAM,CAAEF,WAAY,6GAcNF,EAPS,SAAAtD,GAAK,OAC5B,kBAAC2D,EAAA,EAAD,eACCC,UAAW,kBAACP,EAAD,OACPrD,OCDA6D,EAAeC,YAAiBC,GAUvBC,EARH,WACX,OACA,kBAACC,EAAA,EAAD,CAAOC,UAAWC,EAAYC,aAAcC,EAAUR,aAAgBA,GACrE,kBAACS,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAM7D,EAAU8D,KAAMtD,EAAUuD,OAAQnD,MCP7CoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30d64d8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {List, Datagrid, TextField, EmailField, UrlField, Filter, TextInput, ReferenceInput, SelectInput,Edit, SimpleForm,Create,useRefresh,useRedirect} from 'react-admin';\r\n\r\n\t\t//Adding search option\r\nconst SearchField = (props) => (\r\n\t\t<Filter {...props}>\r\n\t\t\t<TextInput label=\"Search\" source='q' alwaysOn />\r\n\t\t\t<ReferenceInput label=\"User\" source='userId' reference='users' allowEmpty>\r\n\t\t\t\t<SelectInput optionText='name' />\r\n\t\t\t</ReferenceInput>\r\n\r\n\t\t</Filter>\r\n\t);\r\n\r\n\t\t//Initialise contact list\r\nexport const UserList = props => (\r\n\t\t<List filters={<SearchField />} {...props}>\r\n\t\t\t<Datagrid rowClick='edit'>\r\n\t\t\t<TextField source='id' />\r\n\t\t\t<TextField source='name' />\r\n\t\t\t<TextField source='username' />\r\n\t\t\t<EmailField source='email' />\r\n\t\t\t<TextField source='address.street' label='Address' />\r\n\t\t\t<TextField source='phone' />\r\n\t\t\t<UrlField source='website' />\r\n\t\t\t<TextField source='company.name' label='Company' />\r\n\t</Datagrid>\r\n\t\t</List>\r\n\t)\r\n\t\t\r\n\t\t//Editing user list\r\nexport const UserEdit = props => (\r\n\t\t<Edit {...props}>\r\n\t\t\t<SimpleForm>\r\n\t\t\t\t<TextInput disabled source='id' />\r\n\t\t\t\t<TextInput source='name' />\r\n\t\t\t\t<TextInput source='username' />\r\n\t\t\t\t<TextInput source='email' />\r\n\t\t\t\t<TextInput source='address.street' label='Address' />\r\n\t\t\t\t<TextInput source='phone' />\r\n\t\t\t\t<UrlField source='website' />\r\n\t\t\t\t<TextInput source='company.name' label='Company' />\r\n\t\t\t</SimpleForm>\r\n\t\t</Edit>\r\n\t)\r\n\r\n\t\t//Adding user  and redirecting to the to list\r\nexport const UserCreate = props => {\r\n\r\n\tconst refresh = useRefresh();\r\n\tconst redirect = useRedirect();\r\n\tconst onSuccess = ({data}) => {\r\n\t\tredirect('/users');\r\n\t\trefresh();\r\n\t}\r\n\treturn (\r\n\t\t<Create onSuccess={onSuccess} {...props}>\r\n\t\t\t<SimpleForm>\r\n\t\t\t\t<TextInput source='name' />\r\n\t\t\t\t<TextInput source='username' />\r\n\t\t\t\t<TextInput source='email' />\r\n\t\t\t\t<TextInput source='address.street' label='Address' />\r\n\t\t\t\t<TextInput source='phone' />\r\n\t\t\t\t<TextInput source='website' />\r\n\t\t\t\t<TextInput source='company.name' label='Company' />\r\n\t\t\t</SimpleForm>\r\n\t\t</Create>\r\n\t)\r\n\t}","export default {\r\n\t// called when the user attempts to log in and checking password matched to the user\r\n\tlogin: ({ username, password }) => {\r\n\t\tlocalStorage.setItem('username', username);\t\t\r\n\t\treturn fetch('https://my-json-server.typicode.com/vladshatilov/test_json/db')\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\treturn response.clone().json();\r\n\t\t\t\t})\r\n\t\t\t\t.then(json =>{\r\n\t\t\t\t\tlet username_corrected = username.toLowerCase();\r\n\t\t\t\t\tif (password === json[username_corrected][\"pass\"]) {\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t} else { return Promise.reject();}\r\n\t\t\t\t})\t\t\t\t\r\n\t\t\t;\r\n\t},\r\n\t// called when the user clicks on the logout button\r\n\tlogout: () => {\r\n\t\tlocalStorage.removeItem('username');\r\n\t\treturn Promise.resolve();\r\n\t},\r\n\t// called when the API returns an error\r\n\tcheckError: ({ status }) => {\r\n\t\tif (status === 401 || status === 403) {\r\n\t\t\tlocalStorage.removeItem('username');\r\n\t\t\treturn Promise.reject();\r\n\t\t}\r\n\t\treturn Promise.resolve();\r\n\t},\r\n\t// called when the user navigates to a new location, to check for authentication\r\n\tcheckAuth: () => {\r\n\t\t\r\n\t\treturn localStorage.getItem('username')\r\n\t\t\t? Promise.resolve()\r\n\t\t\t: Promise.reject();\r\n\t},\r\n\t// called when the user navigates to a new location, to check for permissions / roles\r\n\tgetPermissions: () => Promise.resolve(),\r\n};","import React from 'react';\r\nimport { Login, LoginForm } from 'react-admin';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = ({\r\n\tmain: { background: 'url(https://res.cloudinary.com/wbd/image/upload/v1596468047/bfe264ec9af21ce3de7511b18ad452d3_h5bujx.jpg)' },\r\n});\r\n\r\nconst CustomLoginForm = withStyles({\r\n\tbutton: { background: '#F15922' },\r\n})(LoginForm);\r\n\r\nconst CustomLoginPage = props => (\r\n\t<Login\r\n\t\tloginForm={<CustomLoginForm />}\r\n\t\t{...props}\r\n\t/>\r\n);\r\n\r\nexport default withStyles(styles)(CustomLoginPage);","import React from 'react';\nimport './App.css';\nimport {Admin, Resource} from 'react-admin';\nimport {UserList, UserEdit, UserCreate} from './Users/users.js';\nimport authUser from './Authentication/auth.js';\nimport generated from './generated_ContactList.json';\nimport fakeDataProvider from 'ra-data-fakerest';\nimport LoginPage from './Authentication/loginPage.js';\n        //The app is built on using ReactAdmin\n\n        // fake DataProvider usage is due to the inability to write to JSONPlaceholder. So json data is generated with json-generator.com\n        // Note from 'MY JSON Server': \"Changes are faked and aren't persisted (just like JSONPlaceholder)\"\n        \n        //Authentication is provided with 'MY JSON Server' (login and password stored there).\nconst dataProvider = fakeDataProvider(generated);\n\nconst App = () => {\n\treturn(\n\t<Admin loginPage={LoginPage}  authProvider={authUser} dataProvider = {dataProvider}>\t\t\n\t\t<Resource name='users' list={UserList} edit={UserEdit} create={UserCreate}/>\n\t</Admin>)\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}